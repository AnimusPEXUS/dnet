// Code generated by go-bindata.
// sources:
// ui/window.glade
// DO NOT EDIT!

package builtin_net_ip

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiWindowGlade = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5b\x6f\xdb\x3a\x12\x7e\xcf\xaf\xe0\xea\xe9\x2c\x16\xb9\x9c\x73\x90\xc5\x3e\xd8\x2e\xb6\xdd\xb6\x28\xd0\x87\x00\x4d\xb7\x8f\x06\x2d\xd1\x0e\xd7\x8a\xa4\x95\x98\x5b\x7f\xfd\x81\x2f\x89\xad\x7a\x48\xce\x90\x94\xaf\x7c\x4b\x51\xcd\x27\x5e\xe6\x23\x87\x1f\x67\xe4\xde\xbb\xe7\xfb\x9c\x3d\x8a\xba\x91\x65\xd1\x4f\x7e\xbf\xb8\x4a\x98\x28\xd2\x32\x93\xc5\xa4\x9f\x7c\xbf\xfd\x74\xfe\xaf\xe4\xdd\xe0\xac\xf7\xb7\xf3\x73\xf6\x59\x14\xa2\xe6\x4a\x64\xec\x49\xaa\x3b\x36\xc9\x79\x26\xd8\x9f\x17\x7f\x5c\x5d\x5c\xb1\xf3\xf3\xc1\x59\x4f\x16\x4a\xd4\x63\x9e\x8a\xc1\x19\x63\xbd\x5a\xfc\xff\x41\xd6\xa2\x61\xb9\x1c\xf5\x93\x89\x9a\xfe\x23\x59\xbd\x68\x66\x96\x5c\xce\x9f\x2b\x47\xff\x13\xa9\x62\x69\xce\x9b\xa6\x9f\x7c\x56\xd3\x1f\xb2\xc8\xca\xa7\x84\xc9\xac\x9f\x3c\x2d\xfe\x9e\x3d\xc8\x58\xaf\xaa\xcb\x4a\xd4\xea\x85\x15\xfc\x5e\xf4\x93\x94\x17\xc3\x71\x99\x3e\x34\xc9\xe0\x13\xcf\x1b\xd1\xbb\x7c\x7d\x60\xf9\x7c\x7a\x27\xf3\x6c\xf1\x37\xf4\xa2\x1b\x5e\x88\x2c\x79\xfd\xff\x4d\xfc\x47\xd9\xc8\x51\x2e\x92\xc1\x6d\xfd\xb0\x01\x6e\x69\x90\xd6\xa4\xd5\x26\xb8\x5d\xef\xcb\xe7\x64\xfd\x09\x87\x96\xb9\x0c\x97\xce\xee\x9e\xd7\x13\x59\x0c\x73\x31\x56\xc9\xe0\x9a\x68\x55\xcb\xc9\x9d\x83\x99\x2a\x2b\xba\xd1\xa8\x54\xaa\xbc\x27\xd8\x95\xb5\x14\x85\xe2\x4a\x96\x45\x32\x78\x14\xb5\x92\x29\xcf\xb1\xc6\x4d\xc5\x53\x59\x4c\x4c\xaf\xdb\x98\x6b\x78\xbe\xbf\xa5\x75\x99\xe7\x22\xfb\xb1\xee\xec\xde\xd3\x6f\x71\x01\xaa\x69\x73\xc7\xb3\xf2\x69\xa8\x5e\x2a\x91\x0c\x64\x61\x34\x05\xfb\x0d\xf7\xfd\xb6\x16\xe2\xbf\x52\x2c\xe9\xae\xa0\xde\x7b\x8d\x80\xe7\x28\xac\xba\xc3\xe6\xab\x5b\xc1\xf3\xf3\xf9\x3f\xfb\x49\x23\x72\x91\x2e\x5c\x07\x34\xd3\xf5\xf6\xdb\x9b\xdd\xa5\xe6\x7d\x97\xfa\xf1\xbb\x5c\x40\x02\x63\x0e\x1b\xe9\x0c\x7a\x15\x4f\xa7\xb2\x98\xd8\xe7\x5d\x3c\x57\xbc\xc8\xe8\xfe\x32\x96\x79\x4e\xb7\xaa\xca\x46\x2e\xc6\xf4\x4a\x6f\xd6\xbb\x04\x5b\x0f\x0e\x01\x96\x83\x9b\x6b\x2e\xd4\xbc\x10\xc4\x33\xae\xbd\x90\xad\x7d\xa1\xd1\x77\x14\xee\xec\x57\x3e\x12\xf9\x96\x99\x66\xed\x36\x64\x9f\xcf\x1b\xca\x54\xcd\x8b\x26\xe7\x8a\x8f\x72\xd1\x4f\x5e\x44\x93\x0c\x6e\xea\x72\x64\x81\xd3\x93\xc5\xe4\xff\x50\x33\x5e\x39\xe0\xd4\x07\x1c\x11\x20\x4b\x14\x19\x98\x9e\x10\xcc\xb4\x98\x50\xfc\xe5\x63\xa1\xea\x97\xc5\x0a\x2d\x66\x7f\x0e\xab\xd9\xe8\xef\xdd\x52\x1d\x7e\xc2\x5d\x9a\x1c\x62\xbe\x7f\xdf\xed\x7c\xbf\x7f\x50\xaa\x2c\x16\x13\x3e\x9a\xff\x4d\x9a\x71\x3d\x6b\x3f\x97\xd4\x31\xd9\xea\x46\xff\x8b\x79\x2d\x52\x21\x1f\x45\x33\xcc\xc4\x98\x3f\xe4\x6a\x37\x3e\xb8\xb3\x45\xe7\x8f\xd0\x4e\x18\x2e\x18\x21\xef\xa1\xbe\xd1\x88\x81\x90\xf8\x68\x04\xea\x3f\xdc\xf7\x4d\x4f\x6c\xe4\x4f\x41\x3c\xb7\x35\x77\xb5\x2c\xa6\x46\x23\xa0\xed\x1b\xed\x8e\x27\xd6\x83\x3d\xb1\x22\x63\xdf\x4f\x35\xbf\x87\xd6\xf6\xbd\x88\x7e\xe7\x9b\xc9\xf0\x99\xe7\x72\x62\x0b\x84\xb6\x74\x64\x85\x8f\x0a\x5e\x03\xe6\x3b\x68\x90\x3d\x8e\x04\x16\x6b\x1b\x19\x2c\xe6\x66\x52\x58\x8c\xad\xe4\xd0\xd9\x93\x48\xa2\x03\xc1\x9d\xba\x98\xd1\x77\x18\xd1\x7f\xa0\x76\x90\x7c\x08\x02\xa0\xfa\x91\xdf\x60\xd8\x07\x04\x1e\x94\x0f\x77\x22\x6d\xc5\x9d\xe9\x68\xa8\xd2\x6a\x98\xcb\x46\x89\x62\x28\x8a\x59\x14\x99\x19\xc6\x0d\x6a\xb6\x3e\x10\xfd\xb8\xc0\xc3\xf4\x06\x02\x26\x4f\x0a\x04\x42\x8c\x4e\x75\x30\x9b\x51\x2a\x7a\x9a\x21\xb8\xac\xe6\x4f\x43\x59\x64\x32\xe5\xaa\xac\x29\x4d\x33\x85\xbe\xab\xb7\x99\x42\x60\x5d\x9b\x28\xc7\x31\x1d\x06\x3e\x22\xd6\x21\xa0\x8f\xe3\xab\x01\xb1\xf6\xd6\xa0\xf5\x2d\x1f\x70\xe0\x92\x6e\x3f\x37\x75\x2e\xb4\x47\x7b\xf9\x20\x61\xcf\x37\xc1\x10\xf6\xff\x16\x8c\x75\xc8\x99\xc3\xba\xae\x6b\xa4\xd3\xc0\x43\x40\xae\x83\x0f\x61\xd1\x62\x07\x04\x12\x36\x8e\x40\x40\xe1\x62\x0a\x04\x10\x3a\xbe\x30\x61\xd1\x76\xc6\x37\x14\x94\x8b\x31\x83\x78\x3b\xdf\x23\x17\x3c\x59\xdb\x26\x1b\xc5\xd5\xcc\x01\x10\xc0\x01\x3d\x11\x02\xf3\xf1\x46\x08\x4f\xbf\x95\xff\xf6\x54\xd6\x53\x51\xb3\x45\xdf\xff\x4e\x7b\x11\x66\xcf\x5a\x35\x09\xb3\x77\xe9\x3a\x40\x92\x73\x6c\x60\xf4\xcd\x4c\x87\x44\xde\xd4\xde\x80\xec\x9b\xdb\xea\x51\xa4\xbb\xfb\xd0\x02\xd0\x2c\xdb\xc4\xa8\x95\x23\x2f\xf4\xae\xf7\x6d\x86\xea\x3b\x03\x5d\xd1\x2e\x04\x9c\x8b\x02\xba\x81\x19\x29\x86\x94\xf5\x37\x80\x0e\x8c\x62\xb3\x8d\x39\x38\xc3\xca\x2a\x12\xcc\x82\x19\x09\x86\xbc\xb2\xd8\x00\x0a\x4e\x30\xdc\x5c\xa0\xc0\x96\x69\x27\xb3\xd3\xcb\x6b\xa4\x27\x95\xb8\xb7\x52\xac\x57\xe5\x3c\x15\x77\x65\x9e\x89\x5a\x93\x61\x42\x68\x47\xf7\x87\x7a\xaf\x93\x62\xc8\x53\x3d\x72\x75\xf6\x3f\xd5\xdb\xc6\xd4\x3e\x9e\xde\x63\xe9\x37\x8e\x5e\x41\xa4\x65\xfc\x8c\x63\x47\x95\x5a\x6d\x4a\xc8\x5e\x8a\xad\x0e\xea\x47\x00\xe5\xc3\x45\x68\xb2\x2b\x1e\x7b\x2d\x33\xb9\xa9\x1c\x81\x14\x8e\x20\xea\x46\x28\x65\xc3\x5f\xd5\x70\x15\xcd\x4c\xa9\x68\xa6\x16\xee\xa5\x6c\x66\x48\x57\x2b\x29\x07\x45\x6c\x44\x87\x8f\xe6\x82\x45\x72\x61\xa2\xb8\x20\x2a\x04\x32\x7a\x23\x04\x5b\x74\xf7\xdd\xc8\x8c\x5b\x3b\x10\x55\x25\x4a\x72\xd8\x86\x67\xd3\xa0\xb6\xe7\x7e\xbe\x5d\x0c\xed\x7d\x84\x03\xfa\x3e\x78\x9f\xf9\x40\x3e\xf3\xbf\x21\xaf\xaa\xfc\xc5\xc1\x0b\xf5\x4b\xd9\xbf\x67\x88\x3e\xc3\xbd\x7b\x07\x0f\x7f\x0e\x3f\xe1\x15\x9b\x70\xe6\xde\x07\xce\x7c\xb9\xe7\x13\xdb\xe5\x28\x3b\x94\x80\x43\x95\x65\xae\x64\x35\x54\xe2\x59\x81\x64\x5d\xba\x33\x9b\xad\x05\x4c\x36\xec\xfa\xfa\xfa\x9f\x5e\xd7\x5d\xaa\x4c\xa7\xc9\x60\xa2\xa6\xe7\xb2\x18\x5b\xb3\x79\xd7\x80\x4e\x97\x20\x7f\xee\x82\x20\xf6\xf1\x46\xa6\x1e\xd0\x04\x28\xa4\xf8\x74\xba\x02\x09\x22\xc2\x70\x17\x48\xc8\xe5\x61\xd0\x24\x83\xf3\x7b\x94\x35\x44\xb7\x1f\x6e\xd8\xd7\x79\xac\x24\x8b\x89\x6b\x5a\xff\xf1\xe5\xba\x6f\xb9\xf2\x2e\x66\x1f\x1f\x63\xf6\xb1\x5b\x0e\x6e\xa7\x99\xb4\xc5\xdc\xcf\x70\x19\xac\xfb\xa8\x0b\xd3\xe5\xca\x00\x52\xa5\xb7\x4c\x19\x42\xa2\x0c\xe2\x5c\x10\x50\xf7\x79\xcd\x31\x17\x33\xe6\x62\xc6\x5c\x4c\x2b\xd0\x41\xe7\x62\x62\x6c\x8f\x26\xdd\x92\x76\x93\xc1\x08\x47\x7f\x46\x3a\xfe\x43\xad\xde\xfb\xfc\x94\x03\xcf\xb1\xdc\xb8\xed\x78\xc8\x2a\xec\x35\x07\xdb\x22\x05\x0e\x21\x87\x2a\x44\x97\x63\x8e\x22\xe6\x4a\xe4\xd5\x49\xd1\x77\x21\xac\xdb\xfb\x10\x08\x7e\x7f\x98\x10\x73\x14\x3b\x26\xd8\xce\x73\x14\xfd\x08\x86\xbd\x3f\x61\x87\x16\xf2\x74\x7e\x97\x02\xbd\xd4\xf9\x3e\x85\x45\x52\x39\xde\xb1\xb0\x4e\x48\x15\x13\x7f\x0d\x4f\x05\x70\xa6\x2e\x13\x7f\x63\x39\x2f\x0c\x12\x25\xa4\x28\x21\x9d\x98\x84\xe4\xac\x2c\xeb\x00\xb7\xaf\x49\xe1\xfc\x16\x6a\xeb\x5e\x87\x67\x6e\x03\xc9\x48\x83\xc9\xc0\x01\x85\x3e\x4d\x32\x3b\x53\x8e\x04\x4f\x4b\xec\xa7\x49\x4c\x5d\x0b\xf6\x99\x12\xd3\x4b\xbc\x26\x17\x02\xf4\x3c\x65\x42\x90\x9e\x9f\x32\x31\x41\xbb\x7f\xd6\xa4\x85\x4a\x88\xb8\x19\x39\xea\x86\xda\xed\x23\x17\x41\x78\xee\xc1\x37\x84\xe6\xac\x6c\x32\x5a\x10\xce\x28\xa7\x5b\x16\x80\xf3\x98\x98\xab\x85\xb0\x45\xb6\x05\xe3\x84\x63\x5c\x66\x82\x74\x8c\xd1\x5a\x90\xa4\xa9\x63\x9e\x7b\xa0\xae\x23\xde\x13\x08\x81\x86\x98\x44\x08\xd7\x3d\xbe\x43\xa0\xba\xc4\x7a\x08\x58\x7a\xdc\x87\x00\x75\x8a\x01\x4d\xb8\xee\x51\xc7\x1b\x22\xd9\x9d\x99\xe1\xaa\x71\xed\xb3\x2f\x6b\x21\x08\xe9\xb3\x2f\xad\xd7\x74\xe1\xf5\x10\x70\x28\xcf\x87\xb0\x3b\xfa\x34\x4c\xeb\x95\xc4\x7d\x7f\xd5\x54\xea\xfe\xbf\xb2\x0c\xa8\xc0\x99\x80\xfd\x02\x02\x1d\xaa\x57\x60\xf0\x06\x4a\x0b\x10\x56\x66\x0e\x94\x0b\x45\x53\xcd\xfd\xd3\x8a\xa8\xe8\xcb\xd2\xd6\x7b\xd0\x2e\xef\xf4\x49\x1a\xd3\xab\xb6\xb1\x24\x84\x86\x0e\x71\x63\xd5\xc2\x8f\xf4\xa7\xa1\x3a\x5f\x27\xb7\x40\x8f\x90\xfe\xe8\x4f\xe4\xb4\x5e\x43\x60\x3f\xfd\x73\x39\xa6\x37\x45\xf2\x47\xf2\x93\x51\x9d\xaf\xba\x5b\xa0\x5b\x23\x3f\x7d\x7e\xc9\x2f\x71\xbd\xd1\x6b\x61\xe0\x6f\xf7\x3c\xda\xba\x3b\x81\x2b\x98\xaa\xd1\x95\xc2\xe5\xb0\x93\x75\xa7\x70\xc5\xab\xff\x63\xc9\xa9\xa4\x28\x8d\x07\x75\x61\xe3\xa9\x2e\x06\x56\x16\x7d\x05\x61\x9a\xa2\x78\x90\x72\xb0\xbf\x8a\xd8\x81\x82\x18\x5c\x3d\xec\x42\x39\x0c\xab\x1a\x86\x10\xc0\x29\x85\x09\xba\x5e\x1c\x94\x04\xae\x3f\x13\x7d\x29\x94\xa8\x1f\x79\xce\x7e\x1b\xe7\x25\x57\x17\xac\x11\xa9\xa3\x14\xe8\x72\x14\x70\x3b\x06\x74\x72\x04\x08\x1f\xfe\x07\x97\xfd\x1c\xc2\x7e\xc7\x68\xdc\x8f\x5f\x60\x25\xc4\xf2\x94\x2f\x97\x0e\xb7\xe7\xf4\x73\x87\xdd\x3d\x0d\x42\x0e\x49\x97\x2c\x70\x54\xbf\x0e\x85\x05\x80\xda\xf5\x0b\x07\x48\x35\x17\x6f\x2f\x42\xaf\xed\x4e\xb5\x17\xba\xd7\xec\x2f\xe1\xba\x15\xb9\x76\x4f\xe7\x83\xd9\xd5\x1c\x05\xad\xee\xf9\x4c\x9b\x43\x87\x54\x1a\x77\xf1\xca\x41\xb8\x8a\x42\x08\x1e\x69\x8f\x2a\xf7\x3a\xad\x81\xb0\x97\x3f\x9c\xea\xb7\x65\xdf\xcf\xb7\x5c\x3c\x76\xb0\x69\x3a\xa1\x12\x91\xad\x7d\x1b\x3e\x96\x88\xc4\x12\x11\x2c\x50\x2c\x11\x21\x02\xc5\x12\x91\x58\x22\x02\x23\x75\x54\x22\x92\x97\xf3\x72\x83\x58\x23\x12\x6b\x44\x0c\xad\x88\x35\x22\x7a\xb0\x58\x23\x82\x07\x8c\x35\x22\x06\x8b\x58\x23\x12\x6b\x44\x4e\xb2\x46\xe4\x35\x06\x89\x45\x22\xb1\x48\xc4\x15\x38\x16\x89\x2c\x8c\xba\xcd\x12\x5f\x63\x6a\xac\x12\x89\x89\xe2\x18\xcb\x23\xe1\x7f\xac\x12\x69\xf3\x3f\x96\x89\x44\xf6\x23\x2c\x8f\x84\xfd\xb1\x4c\x64\x69\x10\xcb\x44\xd6\x2c\x02\x3b\x77\x2c\x13\xb1\x3d\x7b\xdc\xd9\x11\x3b\x2f\x13\x89\xd9\x11\x1d\x5e\x5f\xea\x63\x9d\xaf\x8b\xa0\x2a\xa6\x47\x74\x99\x1e\x81\xdc\xc1\xe3\x4f\xe7\xfb\x2d\x50\xf1\x97\xe1\xbc\x16\x10\xfc\xa2\xf1\xfd\x3f\x37\x66\xb0\x53\xfa\x3d\x38\x43\x44\x83\xff\x3d\x38\xa8\xff\x70\xdf\x37\x0f\x6a\x8d\xfc\x69\xf1\x90\xcd\x2b\xa6\x5a\x16\x53\xe3\x58\x01\x4d\xff\xa5\xd9\xed\x26\xaf\xfd\xe7\xea\x3f\x7a\x97\xf3\x44\xf7\x31\x4f\xc5\xe0\xec\xaf\x00\x00\x00\xff\xff\x95\x64\x83\xcd\x4c\xad\x00\x00")

func uiWindowGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiWindowGlade,
		"ui/window.glade",
	)
}

func uiWindowGlade() (*asset, error) {
	bytes, err := uiWindowGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/window.glade", size: 44364, mode: os.FileMode(420), modTime: time.Unix(1497955297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/window.glade": uiWindowGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"window.glade": &bintree{uiWindowGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

